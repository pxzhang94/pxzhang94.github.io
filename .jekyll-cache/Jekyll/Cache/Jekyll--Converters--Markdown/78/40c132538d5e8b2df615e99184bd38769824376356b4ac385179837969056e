I",<p>这篇博客的核心内容来源于本人发表于软件工程顶级会议ICSE2018并获得“ACM SIGSOFT Distinguished Paper Award”的<a href="http://pxzhang94.github.io/paper/concolic_testing/icse2018.pdf">同名论文</a>，在后面的内容中，若未做特殊说明，本文将使用以下抽象语法树作为例子：
<img src="http://pxzhang94.github.io/img/posts/concolic_testing/2.png" alt="抽象语法树" /></p>

<h2 id="研究问题">研究问题</h2>
<ol>
  <li>给定程序的最优动态符号执行测试策略是什么？</li>
  <li>能不能有效的得到最优策略?</li>
  <li>现有算法是否很好的逼近最优策略?</li>
  <li>是否能设计一个可用算法来逼近最优策略?</li>
  <li>如果4的回答是肯定的，那么该算法与现有算法的相比如何?</li>
</ol>

<h2 id="程序抽象">程序抽象</h2>
<ul>
  <li>程序是带标签的转移系统P=(C,init,V,φ,T)
    <ul>
      <li>C是控制节点的有限集合</li>
      <li>init ∈ C是唯一入口</li>
      <li>V是变量的有限集合</li>
      <li>φ是捕获V初始取值集合的断言</li>
      <li>T : C × GC → C是转移函数</li>
    </ul>
  </li>
  <li>P的一条程序路径就是一个转移序列π = ⟨(c1, gc1, c2), (c2, gc2, c3), · · · , (ck, gck, ck+1)⟩</li>
</ul>

<h2 id="马尔可夫链抽象">马尔可夫链抽象</h2>
<p>本文将使用马尔可夫决策过程来求解最优策略，首先需要形式化的说明P能够转换为对应的马尔可夫链，由于这是显而易见的，所以这里对原作中相关定义不做翻译，截图如下：
<img src="http://pxzhang94.github.io/img/posts/concolic_testing/13.png" alt="定义3.2" />
<img src="http://pxzhang94.github.io/img/posts/concolic_testing/14.png" alt="定义3.3" /></p>

<h2 id="最优策略">最优策略</h2>
<p>问题可以被定义为：</p>
<ul>
  <li>测试用例生成方法的搜索空间是{𝑅𝑇}∪{𝑆𝐸(P)|P ∈ 𝑝𝑎𝑡ℎ(𝑃)}</li>
  <li>一个策略是一个测试用例生成方法的序列&lt;t1, t2, t3, …&gt;</li>
  <li>使用测试用例生成方法t的代价是cost(t)</li>
  <li>找到达到100%覆盖率并具有最小总代价的策略<br /></li>
</ul>

<p>这里通过举例来说明最优策略的选择，首先作如下假设：</p>
<ul>
  <li>随机测试的cost是1</li>
  <li>求解n边路径的代价为10n<br /></li>
</ul>

<p>那么有就会有以下策略：</p>
<ul>
  <li>完全随机测试：期望cost: 5*(2^32)/4 = 5368709120</li>
  <li>完全符号执行：对&lt;1,2,3,4&gt;和&lt;1,3,5,6,7,8&gt;执行符号执行，相关Cost：30+50=80</li>
  <li>最优策略：对&lt;1,2&gt;和&lt;1,3,5,6&gt;执行符号执行，其余执行随机测试，相关Cost：10+30+5=45<br />
注意：随机测试的期望数目决定于具有最小到达概率的节点!<br /></li>
</ul>

<p>事实上，寻找最优策略的问题可以简化为基于带代价的马尔可夫决策过程的模型检测问题，比如说下面这个极其简单的程序的相关抽象：
<img src="http://pxzhang94.github.io/img/posts/concolic_testing/4.png" alt="程序" />
其抽象语法树为：
<img src="http://pxzhang94.github.io/img/posts/concolic_testing/5.png" alt="抽象语法树" />
相对应的马尔可夫决策过程为：
<img src="http://pxzhang94.github.io/img/posts/concolic_testing/6.png" alt="马尔可夫决策过程" /></p>

<p>显然，根据带代价的马尔可夫决策过程可以很轻松地回答研究问题1和2：</p>
<ol>
  <li><em>最优策略是具有最小期望成本的策略</em></li>
  <li><em>其求解复杂性随着P中的控制节点数量指数级增长</em></li>
</ol>

<h2 id="模拟实验">模拟实验</h2>
<p>该部分实验主要是为了验证现有算法（相关算法的理论可以参考<a href="http://pxzhang.cn/2018/09/29/concolic-testing-1/">前一篇</a>)的性能，实验基于随机生成的马尔可夫链，而非现有程序，实验设置如下：</p>
<ul>
  <li>随机生成抽象表示程序的DTMC模型（分支密度50%；低概率分支密度0.2（10，15，20），0.8（5），低概率程度1.0E-4）</li>
  <li>随机生成表示每条分支符号执行代价的cost（不超过1000）</li>
  <li>每种情况有50个模型，每个方法运行1000次<br /></li>
</ul>

<p>相应的实验结果如下：</p>

<table>
  <thead>
    <tr>
      <th> </th>
      <th>5 states</th>
      <th>10 states</th>
      <th>15 states</th>
      <th>20 states</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Optimal</td>
      <td>1</td>
      <td>1</td>
      <td>1</td>
      <td>1</td>
    </tr>
    <tr>
      <td>RT</td>
      <td>138.9</td>
      <td>11.3</td>
      <td>44.2</td>
      <td>114.7</td>
    </tr>
    <tr>
      <td>RCN</td>
      <td>1.7</td>
      <td>14.4</td>
      <td>15.1</td>
      <td>12.7</td>
    </tr>
    <tr>
      <td>RSS</td>
      <td>12.8</td>
      <td>50.7</td>
      <td>64.0</td>
      <td>68.1</td>
    </tr>
    <tr>
      <td>RPS</td>
      <td>12.8</td>
      <td>50.6</td>
      <td>63.9</td>
      <td>68.5</td>
    </tr>
    <tr>
      <td>DFS</td>
      <td>7.1</td>
      <td>27.4</td>
      <td>21.8</td>
      <td>18.6</td>
    </tr>
    <tr>
      <td>DART</td>
      <td>1.8</td>
      <td>13.0</td>
      <td>12.8</td>
      <td>13.0</td>
    </tr>
    <tr>
      <td>GS</td>
      <td>1.9</td>
      <td>13.5</td>
      <td>13.9</td>
      <td>13.3</td>
    </tr>
    <tr>
      <td>CGS</td>
      <td>1.8</td>
      <td>12.6</td>
      <td>13.6</td>
      <td>13.8</td>
    </tr>
    <tr>
      <td>SGS</td>
      <td>11.2</td>
      <td>32.4</td>
      <td>29.4</td>
      <td>25.5</td>
    </tr>
  </tbody>
</table>

<p>说明：这里RCN对应前文中的Coverage-Optimized Search<br /> 
显然，现在可以回答研究问题3：<em>现有算法还有很大的改进空间</em></p>

<h2 id="贪婪算法">贪婪算法</h2>
<p>算法的核心想法为根据单位时间(cost)所能覆盖的期望节点数(reward)选择局部最优策略和路径</p>

<h3 id="离散时间马尔可夫链估计">离散时间马尔可夫链估计</h3>
<p>使用拉普拉斯估计方法来估计离散时间马尔可夫链</p>
<ul>
  <li>如果在P中从s到t是不可能的，置Pr(s, t)=0</li>
  <li>否则，置Pr(s,t) = (#(s, t)+1) / (#s+n)<br />
举例说明：
<img src="http://pxzhang94.github.io/img/posts/concolic_testing/7.png" alt="拉普拉斯估计方法" /></li>
</ul>

<h3 id="cost估计">cost估计</h3>
<p>使用函数拟合来估计cost：</p>
<ul>
  <li>假设cost是基础操作的加权和</li>
  <li>根据收集的cost来估计权值</li>
  <li>给定一个约束，利用其所有基础操作的加权和来估计cost<br />
举例说明： 约束c是a * b &gt; 0，所以SC(c) = WC(*) + WC(&gt;)</li>
</ul>

<h3 id="算法">算法</h3>
<p>首先，根据实证研究做如下假设：</p>
<ul>
  <li>求解一个线性（不）等式及其结合的cost是4</li>
  <li>求解一个非线性（不）等式的cost是10</li>
  <li>求解一个非线性（不）等式的布尔组合的cost是50<br /></li>
</ul>

<p>具体相关步骤如下：</p>
<ol>
  <li>根据下图公式计算每个节点的reward
<img src="http://pxzhang94.github.io/img/posts/concolic_testing/8.png" alt="reward计算" />
比如对于下面这种情况：
<img src="http://pxzhang94.github.io/img/posts/concolic_testing/9.png" alt="reward例子" />
可以获得以下方程组：
    <ul>
      <li>𝑅1 = 1/3*𝑅2+2/3*𝑅3</li>
      <li>𝑅2 = 1+𝑅3</li>
      <li>𝑅3 = 1/3*𝑅4+2/3*𝑅5</li>
      <li>𝑅4 = 1</li>
      <li>𝑅5 = 1/3*𝑅6+2/3*𝑅8</li>
      <li>𝑅6 = 1+1/2*𝑅7+1/2*𝑅8</li>
      <li>𝑅7 = 1+𝑅8</li>
      <li>𝑅8 = 0<br />
相应的部分解为：</li>
      <li>𝑅1 = 1</li>
      <li>𝑅2 = 5/3</li>
      <li>𝑅4 = 1</li>
      <li>𝑅6 = 1.5</li>
    </ul>
  </li>
  <li>随机测试的期望收益：∑𝑠∈𝑆 {𝜇(𝑠)×𝑅𝑠}
    <ul>
      <li>随机测试：cost 1, reward 1</li>
    </ul>
  </li>
  <li>
    <p>选择只有结束节点未被覆盖的路径</p>
  </li>
  <li>SE(π)的期望收益：𝑅𝑠，如果last(π)是s
    <ul>
      <li>路径&lt;1, 2&gt;：cost 4, reward 5/3</li>
      <li>路径&lt;1, 3, 4&gt;：cost 50, reward 1</li>
      <li>路径&lt;1, 3, 5, 6&gt;：cost 50, reward 3/2</li>
    </ul>
  </li>
  <li>
    <p>选择其中最大的reward/cost</p>
  </li>
  <li>更新离散时间马尔可夫链</li>
</ol>

<h3 id="模拟实验结果">模拟实验结果</h3>
<p>该部分实验仍使用上文中提到的模拟马尔可夫链，结果如下：</p>

<table>
  <thead>
    <tr>
      <th> </th>
      <th>5 states</th>
      <th>10 states</th>
      <th>15 states</th>
      <th>20 states</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Optimal</td>
      <td>1</td>
      <td>1</td>
      <td>1</td>
      <td>1</td>
    </tr>
    <tr>
      <td>G</td>
      <td>2.1</td>
      <td>4.8</td>
      <td>3.1</td>
      <td>4.8</td>
    </tr>
  </tbody>
</table>

<p>显然，现在可以回答研究问题4：<em>这里提出的贪婪算法更接近最优策略</em></p>

<h2 id="klee实验">KLEE实验</h2>
<p>该部分实验针对的是实际程序，而非之前的模拟马尔可夫链，实验设置如下：</p>
<ul>
  <li>测试平台：KLEE</li>
  <li>测试对象：GNU科学库中的程序集</li>
  <li>测试目标：测量不同策略实现的覆盖率随时间的变化
<img src="http://pxzhang94.github.io/img/posts/concolic_testing/10.png" alt="程序集" /></li>
</ul>

<p>实验结果如下:</p>

<table>
  <thead>
    <tr>
      <th>时间</th>
      <th>G</th>
      <th>RCN</th>
      <th>RSS</th>
      <th>RPS</th>
      <th>DFS</th>
      <th>RT</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>5 min (%)</td>
      <td>72.6</td>
      <td>28.1</td>
      <td>22.5</td>
      <td>29.7</td>
      <td>17.9</td>
      <td>65.5</td>
    </tr>
    <tr>
      <td>15 min (%)</td>
      <td>73.9</td>
      <td>30.1</td>
      <td>24.3</td>
      <td>34.3</td>
      <td>21.0</td>
      <td>72.7</td>
    </tr>
    <tr>
      <td>30 min (%)</td>
      <td>76.9</td>
      <td>32.6</td>
      <td>25.0</td>
      <td>36.5</td>
      <td>22.3</td>
      <td>74.0</td>
    </tr>
  </tbody>
</table>

<p>更直观的折线图如下：
<img src="http://pxzhang94.github.io/img/posts/concolic_testing/11.png" alt="折线图" /></p>

<p>以及对于每个程序，实际执行的SE以及RT的次数统计如下：
<img src="http://pxzhang94.github.io/img/posts/concolic_testing/12.png" alt="测试方法统计" /></p>

<h2 id="贡献">贡献</h2>
<ul>
  <li>定义了基于程序行为概率抽象的最优动态符号执行测试策略</li>
  <li>将确定最优策略的问题简化为基于带代价的马尔可夫决策过程的模型检测问题</li>
  <li>使用模拟实验验证了现有算法并揭示它们还有很大的改进空间</li>
  <li>提出了一种接近最优策略的贪婪算法</li>
</ul>

<h2 id="未来工作">未来工作</h2>
<ul>
  <li>研究其它用于估算概率以及求解代价的方法</li>
  <li>把该框架扩展到其它的测试用例生成方法中（注意到有人工智能系统分析与测试方向的论文引用了本文）</li>
</ul>

:ET