<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>PXZHANG</title>
    <description>这里是 @PXZHANG张培歆 的个人网站</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sun, 07 Oct 2018 16:21:40 +0800</pubDate>
    <lastBuildDate>Sun, 07 Oct 2018 16:21:40 +0800</lastBuildDate>
    <generator>Jekyll v3.7.4</generator>
    
      <item>
        <title>This is a test 2</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;Hello World!&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Mon, 01 Oct 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/10/01/concolic-testing-2/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/10/01/concolic-testing-2/</guid>
        
        <category>计算机科学</category>
        
        
      </item>
    
      <item>
        <title>Concolic Testing 1</title>
        <description>&lt;h2 id=&quot;随机测试random-testing&quot;&gt;随机测试（Random Testing）&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;使用随机生成的测试输入执行程序，然后观察是否会出现错误状态&lt;/li&gt;
  &lt;li&gt;对于高可能性的错误，随机测试的代价很低，反之很高&lt;br /&gt;
比如说下面的第3行判断语句，对于随机测试来说，几乎不可能覆盖到其True分支
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;public static void example(int x, int y) {
  int[] array = new int[10];
  if (y == 42342531) {
      array[x] = y; 
  }
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;符号执行symbolic-execution&quot;&gt;符号执行（Symbolic Execution）&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;利用符号变量来代替输入执行程序，然后使用约束求解器求解路径约束从而获得测试输入&lt;/li&gt;
  &lt;li&gt;符号执行的代价很高，但是可以“保证”到达给定节点&lt;br /&gt;
同样是上面那个程序，我们可以通过求解下面的路径约束：
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;y == 42342531 &amp;amp;&amp;amp; (x&amp;lt;0 || x &amp;gt;= 10)
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;生成一个特定的测试输入来覆盖我们指定的路径，比如：&lt;/p&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;x == 10 and y == 42342531
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;但是目前符号执行面临两个问题，第一：由于需要利用符号变量来构建路径约束，所以显然其比随机测试需要更多的时间；第二：目前最常见的约束求解器（如Z3等）的求解能力仍十分有限，对于稍复杂的路径约束就束手无策。
所以自动化测试领域提出了concolic testing，我翻译为动态符号执行测试，也可以翻译为具体符号执行，因为concolic是concrete和symbolic的合成词。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;动态符号执行测试concolic-testing&quot;&gt;动态符号执行测试（Concolic Testing）&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;集成了具体执行和符号执行两种策略&lt;/li&gt;
  &lt;li&gt;决定选择随机测试还是符号执行&lt;/li&gt;
  &lt;li&gt;如果选择符号执行，决定选择的程序执行路径&lt;/li&gt;
  &lt;li&gt;常见的动态符号执行测试工具：Microsoft SAGE和JDart等&lt;br /&gt;
比如说如下程序：
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;int h(int x, int y) {
  if (x != y) { 
      if (2*x == x + 10) { 
          abort(); /*error*/
      }
      else {
          return 2x+y; 
      }
  }
  else{
      return 2x;
  } 
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;其抽象语法树为：
&lt;img src=&quot;http://pxzhang94.github.io/img/posts/concolic_testing_1/1.png&quot; alt=&quot;抽象语法树&quot; /&gt;
如上图所示，黑色箭头表示随机测试，蓝色箭头表示符号执行.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;常见动态符号执行策略&quot;&gt;常见动态符号执行策略&lt;/h2&gt;
&lt;p&gt;事实上，绝大多数动态符号执行测试策略仅执行一遍随机测试，更多的是关注随后符号执行路径的调度，这导致相关算法性能距离&lt;a href=&quot;http://pxzhang94.cn/2018/10/01/concolic-testing-2&quot;&gt;最优调度策略&lt;/a&gt;有极大的差距。我将使用以下函数作为例子简单阐述几种常见动态符号执行以及符号执行策略。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;void myfunc(int x, int y){
1.    if(x==y){
2.        x++;
       }
3.    if ((x*x)%10==9){
4.        return;
       }
5.    if (x*y+3*y-5*x==15){  
6.        if (x%2==1 ||y%2==1){
7.           x = x-y;
           } 
       }
8.    return;
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;其抽象语法树为：
&lt;img src=&quot;http://pxzhang94.github.io/img/posts/concolic_testing_1/2.png&quot; alt=&quot;抽象语法树&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;subpath-guided-search&quot;&gt;&lt;a href=&quot;http://pxzhang94.github.io/paper/concolic_testing/oopsla13-pgse.pdf&quot;&gt;Subpath-Guided Search&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;该方法是符号执行测试调度策略，首先给出两个关键的定义：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Length-n子路径：给定一条路径&amp;lt;s1, s2,…, sk&amp;gt;，那么其length-n 子路径就是&amp;lt;sk-n+1, sk-n+2, …, sk&amp;gt;&lt;/li&gt;
  &lt;li&gt;统计分析结构：结构e = (π, f) 用于统计分析，其中π是length-n 子路径，f是π被探索过的频率&lt;br /&gt;
基于以上定义，该调度策略可以总结为以下步骤：
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;初始化 
  结构e的优先队列
重复 
  1.随机选择一个具有最低子路径计数的节点继续
  2.如果下一个节点是终节点，求解路径条件获得测试用例
  3.用下一个节点来更新优先队列
直到 所有节点被覆盖 
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;用一个案例来进一步说明该算法（优先队列中带*结构表示有包含相应子路径的未终结状态）：&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;步骤&lt;/th&gt;
      &lt;th&gt;候选路径&lt;/th&gt;
      &lt;th&gt;优先队列&lt;/th&gt;
      &lt;th&gt;生成用例&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1:1t&lt;br /&gt;2:1f&lt;/td&gt;
      &lt;td&gt;(*1t, 0), (*1f, 0)&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;1:1t&lt;br /&gt;2:1f3t&lt;br /&gt;3:1f3f&lt;/td&gt;
      &lt;td&gt;(*1t, 0), (*3t, 0), (*3f, 0), (1f, 1)&lt;/td&gt;
      &lt;td&gt;1f3t4&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;1:1t&lt;br /&gt;2:1f3f&lt;/td&gt;
      &lt;td&gt;(*1t, 0), (*3f, 0), (3t, 1), (1f, 1)&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;…&lt;/td&gt;
      &lt;td&gt;…&lt;/td&gt;
      &lt;td&gt;…&lt;/td&gt;
      &lt;td&gt;…&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;directed-automated-random-testing&quot;&gt;&lt;a href=&quot;http://pxzhang94.github.io/paper/concolic_testing/pldi2005.pdf&quot;&gt;Directed Automated Random Testing&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;该方法是动态符号执行测试调度策略，也是目前广泛使用的JAVA自动化测试工具JDart的算法基础。该调度策略可以总结为以下步骤：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;初始化 
	一个具体执行的测试用例
重复 
	1.执行该测试用例
	2.深度优先搜索获取未覆盖的分支
	3.求解访问未覆盖分支的路径条件获得测试用例
直到 所有节点被覆盖 
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;用一个案例来进一步说明该算法：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;假设第一个测试用例是x = 0, y = 100,其访问了节点1, 3, 5, 8&lt;/li&gt;
  &lt;li&gt;对路径&amp;lt;1, 3, 5, 6&amp;gt;通过求解下面的条件 x!=y &amp;amp;&amp;amp; (x&lt;em&gt;x)%10!=9 &amp;amp;&amp;amp; x&lt;/em&gt;y+3y-5x==15执行符号执行&lt;/li&gt;
  &lt;li&gt;假设测试用例是x=4, y = 5 ,其访问了节点1, 3, 5, 6, 8&lt;/li&gt;
  &lt;li&gt;对路径&amp;lt;1, 3, 5, 6, 7&amp;gt;执行符号执行&lt;/li&gt;
  &lt;li&gt;…..&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;coverage-optimized-search&quot;&gt;&lt;a href=&quot;http://pxzhang94.github.io/paper/concolic_testing/klee-osdi-08.pdf&quot;&gt;Coverage-Optimized Search&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;该方法是动态符号执行测试调度策略,也是目前广泛使用的C/C++自动化测试工具KLEE的算法基础。该调度策略可以总结为以下步骤：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;初始化
	一个具体执行的测试用例
重复
	1.执行该测试用例
	2.计算未覆盖节点与已覆盖节点间的最小距离
	3.从最小距离中随机选择一条路径
	4.求解该路径条件获得一个测试用例
直到 所有节点被覆盖
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;用一个案例来进一步说明该算法：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;假设第一个测试用例是x = 0, y = 100,其访问了节点1, 3, 5, 8&lt;/li&gt;
  &lt;li&gt;对于 &amp;lt;1, 2&amp;gt;, &amp;lt;1, 3, 4&amp;gt;和&amp;lt;1, 3, 5, 6&amp;gt;最小距离是1, &amp;lt;1, 3, 5, 6, 7&amp;gt;是2&lt;/li&gt;
  &lt;li&gt;从&amp;lt;1, 2&amp;gt;, &amp;lt;1, 3, 4&amp;gt;和&amp;lt;1, 3, 5, 6&amp;gt;随机选择一条路径,假设是&amp;lt;1, 3, 4&amp;gt;&lt;/li&gt;
  &lt;li&gt;对路径&amp;lt;1, 3, 4&amp;gt;执行符号执行&lt;/li&gt;
  &lt;li&gt;…..&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;generational-search&quot;&gt;&lt;a href=&quot;http://pxzhang94.github.io/paper/concolic_testing/FuzzTesting.pdf&quot;&gt;Generational Search&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;该方法是动态符号执行测试调度策略。该调度策略可以总结为以下步骤：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;初始化
	带有一个测试用例的测试套件
重复
	1.执行该测试用例
	2.给定该测试用例的路径，其上所有分支条件系统地用未被访问的另一分支替换
	3.求解每个约束获得相应的测试用例
直到 所有节点被覆盖
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;用一个案例来进一步说明该算法：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;假设第一个测试用例是x = 0, y = 100,其访问了节点1, 3, 5, 8&lt;/li&gt;
  &lt;li&gt;对路径&amp;lt;1, 2&amp;gt;, &amp;lt;1,3,4&amp;gt;和&amp;lt;1,3,5,6&amp;gt;的路径条件求解并将相应的测试用例添加到测试套件中&lt;/li&gt;
  &lt;li&gt;选择路径&amp;lt;1, 2&amp;gt;的测试用例&lt;/li&gt;
  &lt;li&gt;选择路径&amp;lt;1, 3, 4&amp;gt;的测试用例&lt;/li&gt;
  &lt;li&gt;选择路径&amp;lt;1, 3, 5, 6&amp;gt;的测试用例&lt;/li&gt;
  &lt;li&gt;….. 
下图来源于原论文，较为清晰的阐述了该算法调度顺序：
&lt;img src=&quot;http://pxzhang94.github.io/img/posts/concolic_testing_1/3.png&quot; alt=&quot;Generational Search&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;context-guided-search&quot;&gt;&lt;a href=&quot;http://pxzhang94.github.io/paper/concolic_testing/seo-fse2014.pdf&quot;&gt;Context-Guided Search&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;该方法是动态符号执行测试调度策略。首先给出一个关键的定义&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;K-Context：定义分支b的k-context为一条执行路径上之前k个分支的序列
比如路径&amp;lt;1,2,3,5,8&amp;gt;包含分支(1,3,5)，那么：&lt;/li&gt;
  &lt;li&gt;5的1-context为(5)&lt;/li&gt;
  &lt;li&gt;5的2-context为(3,5)&lt;/li&gt;
  &lt;li&gt;5的3-context为(1,3,5)
该调度策略可以总结为以下步骤：
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;初始化
  一个具体执行的测试用例和k = 1
重复
  1.重复广度优先搜索
      a.检查在执行树上给定深度的每个节点的k-context是否是新的
      b.求解访问未覆盖分支的路径条件获得测试用例
      c.用测试用例更新执行树
  2.递增k
直到 所有节点被覆盖
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;用一个案例来进一步说明该算法：&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;假设第一个测试用例是x = 0, y = 100,其访问了节点1, 3, 5, 8&lt;/li&gt;
  &lt;li&gt;对路径&amp;lt;1, 2&amp;gt;执行符号测试&lt;/li&gt;
  &lt;li&gt;假设测试用例是x=0, y=0,其访问了节点1, 2, 3, 5, 8&lt;/li&gt;
  &lt;li&gt;对路径&amp;lt;1, 3, 4&amp;gt;执行符号测试&lt;/li&gt;
  &lt;li&gt;…..&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sat, 29 Sep 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/09/29/concolic-testing-1/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/09/29/concolic-testing-1/</guid>
        
        <category>Software Engineering</category>
        
        <category>Concolic Testing</category>
        
        
      </item>
    
  </channel>
</rss>
